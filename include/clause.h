#include <bits/stdc++.h>
/*
Definition explanation:
    EMPTY_SET:
        The set is empty.
        return true in DPLL next.
    WITH_SIG_CLA:
        The set contains single clause(s).
        Do simplification next.
    SPLIT_REQD:
        The set contains neither single nor empty clauses.
        Do split operation next.
    WITH_EMPTY_CLA:
        The set contains empty clause(s).
        return false in DPLL next.
*/
namespace dpll {
class clause {
public:
  clause();
  ~clause();
  int add(int d) {
    this->data.insert(d);
    return 0;
  }
  int remove(int d) { this->data.erase(d); }

private:
  std::unordered_set<int> data;
};

class clauseSet {
public:
  clauseSet();
  ~clauseSet();
  int read_from_cnf(std::string path);

private:
  int cla_count, var_count;
  std::vector<clausePtr> clause_vec;
};
typedef std::shared_ptr<clause> clausePtr;
} // namespace dpll

// void CNF_Save(ClaNode *head, FILE *DSS) {
//   if (!head || !DSS)
//     return;
//   ClaNode *cur = head;
//   fprintf(DSS, "c \tThis Binary Puzzle is generated by\nc \tthe algorithm "
//                "written by Shuhan Li\n");
//   fprintf(DSS, "p cnf %d %d\n", var_count, cla_count);
//   while (cur) {
//     for (int i = 0; i < cur->len; i++)
//       fprintf(DSS, "%d ", cur->data[i]);
//     fprintf(DSS, "0\n");
//     cur = cur->next;
//   }
//   return;
// }

// void RES_Write(FILE *DSW, ClaNode *head, int *(*DPLL)(ClaNode *)) {
//   if (!DSW)
//     return;
//   clock_t start = clock();
//   int *result = DPLL(head);
//   clock_t end = clock();
//   double period = (double)(end - start) / CLOCKS_PER_SEC * 1000;
//   if (!result)
//     fprintf(DSW, "s 0\nt %.0f\n", period);
//   else {
//     fprintf(DSW, "s 1\nv ");
//     for (int i = 1; i <= var_count; i++) {
//       int d = i * result[i];
//       if (d)
//         fprintf(DSW, "%d ", d);
//     }
//     fprintf(DSW, "\nt %.0f\n", period);
//   }
//   return;
// }